name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-2019  # 用windows2019解决了“please install Visual Studio 2015 build tools”的问题，如果还不行，可以看下https://github.com/actions/runner-images/issues/387

    env:
      Solution_Name: Dumpert.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Windows 8.1 SDK 参考 https://cloud.tencent.com/developer/article/1739319
    - name: Install Windows 8.1 SDK
      shell: powershell
      run: |
        Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile sdksetup.exe -UseBasicParsing
        Start-Process -Wait sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      # run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      run: |
        msbuild ${{ github.workspace }}\Dumpert\Outflank-Dumpert.sln
        msbuild ${{ github.workspace }}\Dumpert-DLL\Outflank-Dumpert-DLL.sln
      env:
        Configuration: ${{ matrix.configuration }}


    # Upload the artifact 
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: DumpertAll
        path: ${{ github.workspace }}
